#!/usr/bin/env bash

#set -e
#set -vx

PANSIFT_UUID=""
PANSIFT_INGEST=""
PANSIFT_TOKEN=""
MACHINE_UUID=""
umask 077

# Macro settings for paths etc.
source "$HOME"/Library/Preferences/Pansift/pansift.conf

# Configuration and preferences files
mkdir -p "$PANSIFT_PREFERENCES"
echo "Pansift Preferences Path: \"$PANSIFT_PREFERENCES\""

# Scripts and additional executables
mkdir -p "$PANSIFT_SCRIPTS"
echo "Pansift Application Scripts Path: \"$PANSIFT_SCRIPTS\""

# Logs, logs, logs
mkdir -p "$PANSIFT_LOGS"
echo "Pansift Logs Path: \"$PANSIFT_LOGS\""

#PANSIFT_SUPPORT="$HOME"/Library/Application\ Support/Pansift
mkdir -p "$PANSIFT_SUPPORT"
echo "Pansift Application Support Path: \"$PANSIFT_SUPPORT\""

# Next line will need changing once a full Pansift flip
#defaults write /Library/Preferences/com.matryer.BitBar pluginsDirectory "$PANSIFT_SCRIPTS"/Plugins
# Need to add a first run that adds the plist to the LaunchAgents !!! Although this happens on open...
defaults write com.pansift.p3bar pluginsDirectory "$PANSIFT_SCRIPTS"/Plugins
defaults write com.pansift.p3bar NSNavLastRootDirectory "$PANSIFT_SCRIPTS"/Plugins 
defaults write com.pansift.p3bar userConfigDisabled -bool true

pansift_uuid_file="$PANSIFT_PREFERENCES"/pansift_uuid.conf
pansift_ingest_file="$PANSIFT_PREFERENCES"/pansift_ingest.conf
pansift_token_file="$PANSIFT_PREFERENCES"/pansift_token.conf
machine_uuid_file="$PANSIFT_PREFERENCES"/machine_uuid.conf
annotations_file="$PANSIFT_LOGS"/pansift_annotations.log
touch "$annotations_file" # This is just to create for tailing if not already there.

url_regex='(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'

# If we're restarting then clean up...
telegraf_pid_file="$PANSIFT_SUPPORT"/telegraf.pid
if test -f "$telegraf_pid_file"; then
	rm "$PANSIFT_SUPPORT"/telegraf.pid || true
fi 
if [[ $(pgrep "telegraf") ]]; then
	pkill -9 -f "$PANSIFT_SUPPORT"/telegraf; sleep 5 || true
fi

if test -f "$pansift_uuid_file"; then
	line=$(head -n 1 "$pansift_uuid_file")
	pansift_uuid=$(echo -n "$line" | awk '{$1=$1;print}' | tr ',' '.' | tr -s ' ' | tr '[:upper:]' '[:lower:]' | tr -d '\r')
else
	pansift_uuid=$(uuidgen | tr '[:upper:]' '[:lower:]')
	echo -n "$pansift_uuid" > $pansift_uuid_file
	wait $!
fi

# We need the ENV variable for the subshell...
export PANSIFT_UUID=$pansift_uuid
curl_user_agent="pansift_"$pansift_uuid



# ZTP Function
function ztp () {
	#sleep $[($RANDOM % 5)+1]
	if [[ "$1" == "-t" ]]; then 
		ztp_host="https://localapp.pansift.com"
	else
		ztp_host="https://app.pansift.com"
	fi
	app_code=$(curl -A "$curl_user_agent" --no-keepalive -k -s -o /dev/null -w "%{http_code}" "$ztp_host" --stderr -)
	app_code="${app_code:-$?}"
	if [[ "$app_code" == "200" ]] && [[ "$1" == "-t" ]]; then
		setup_outcome=$("$PANSIFT_SCRIPTS"/ztp.sh -t "$PANSIFT_UUID") # Shell expansion for further switches was proving difficult
	else
		setup_outcome=$("$PANSIFT_SCRIPTS"/ztp.sh -p "$PANSIFT_UUID")
	fi
}

if test -f "$pansift_token_file"; then
	# Token is case sensitive!!!
	pansift_clean_token=$(head -n 1 "$pansift_token_file" | awk '{$1=$1;print}' | tr ',' '.' | tr -s ' ' | tr -d '\r')
	# pansift_clean_token=$(head -n 1 "$pansift_token_file" | awk '{$1=$1;print}' | tr ',' '.' | tr -s ' ' | tr -d '\r' | sed 's! !\\ !g')
else
	ztp $1
	wait $!
	if test -f "$pansift_token_file"; then
		pansift_clean_token=$(head -n 1 "$pansift_token_file" | awk '{$1=$1;print}' | tr ',' '.' | tr -s ' ' | tr -d '\r')
	fi
fi
export PANSIFT_TOKEN=$pansift_clean_token

# This assumes connectivity on first run to at lesat get the correct DB host (but default fall back too) 
# Would be good to have a forced kill switch to localhost in the future somehow other than connected restarts
# See ingest router webhook service.

if test -f "$pansift_ingest_file"; then
	line=$(head -n 1 "$pansift_ingest_file")
	if [[ $line =~ $url_regex ]]; then
		pansift_ingest=$(echo -n "$line" | xargs | tr ',' '.' | tr -s ' ' | tr '[:upper:]' '[:lower:]' | tr -d '\r')
	else
		echo -n "Problem with ingest_file contents at: ${pansift_ingest_file}"
	fi
else
	ztp $1
	wait $!
	if test -f "$pansift_ingest_file"; then
		line=$(head -n 1 "$pansift_ingest_file")
		pansift_ingest=$(echo -n "$line" | xargs | tr ',' '.' | tr -s ' ' | tr '[:upper:]' '[:lower:]' | tr -d '\r')
	fi
fi
export PANSIFT_INGEST=$pansift_ingest


if test -f "$machine_uuid_file"; then
	line=$(head -n 1 "$machine_uuid_file")
	machine_uuid=$(echo -n "$line" | awk '{$1=$1;print}' | tr ',' '.' | tr -s ' ' | tr '[:upper:]' '[:lower:]' | tr -d '\r')
else
	if [[ "$OSTYPE" == linux-gnu* ]]; then
		# ... coerce hostid in to uuid?
		true
	elif [[ "$OSTYPE" == darwin* ]]; then
		# Mac OSX
		machine_uuid=$(ioreg -d2 -c IOPlatformExpertDevice | awk -F\" '/IOPlatformUUID/{print $(NF-1)}' | tr '[:upper:]' '[:lower:]')
	elif [[ "$OSTYPE" == "cygwin" ]]; then
		# POSIX compatibility layer and Linux environment emulation for Windows
		true
	elif [[ "$OSTYPE" == "msys" ]]; then
		# Lightweight shell and GNU utilities compiled for Windows (part of MinGW)
		true
	elif [[ "$OSTYPE" == "win32" ]]; then
		# I'm not sure this can happen.
		true
	elif [[ "$OSTYPE" == "freebsd"* ]]; then
		true
		# ...
	else
		machine_uuid=$(uuidgen | tr '[:upper:]' '[:lower:]')
		# Or perhaps another approach?
		# od -x /dev/urandom | head -1 | awk '{OFS="-"; print $2$3,$4,$5,$6,$7$8$9}'
		# Unknown so create it.
	fi
	# MAC Machine UUID is different but will be our unique  primary key we can read or generate on other platforms
	echo -n "$machine_uuid" > "$PANSIFT_PREFERENCES"/machine_uuid.conf
fi
export MACHINE_UUID=$machine_uuid


echo "Pansift UUID: $PANSIFT_UUID"
echo "Machine UUID: $MACHINE_UUID"
echo "Ingest URL: $PANSIFT_INGEST"
echo "ZTP Token: $PANSIFT_TOKEN"

if [[ "$1" == "-n" ]]; then 
	true
else
	sleep 3 # Give Telegraf a little more time to flush buffers and shut down
fi

touch "$PANSIFT_SUPPORT"/telegraf.pid "$PANSIFT_LOGS"/telegraf.log
# We need to get the pansift_osx_machine data up fast and not have to wait for the longet interval...
"$PANSIFT_SUPPORT"/telegraf --once --config "$PANSIFT_PREFERENCES"/telegraf-osx.conf --pidfile "$PANSIFT_SUPPORT"/telegraf.pid >/dev/null 2>&1 &
wait $!
"$PANSIFT_SUPPORT"/telegraf --config "$PANSIFT_PREFERENCES"/telegraf-osx.conf --pidfile "$PANSIFT_SUPPORT"/telegraf.pid >/dev/null 2>&1 &
disown
exit 0
