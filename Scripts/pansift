#!/usr/bin/env bash

#set -e
#set -vx

PANSIFT_UUID=""
MACHINE_UUID=""
umask 077

# Configuration and preferences files
PANSIFT_PREFERENCES="$HOME"/Library/Preferences/Pansift
mkdir -p "$PANSIFT_PREFERENCES"
export PANSIFT_PREFERENCES="$PANSIFT_PREFERENCES"
echo "Pansift Preferences Path: \"$PANSIFT_PREFERENCES\""

# Scripts and additional executables
PANSIFT_SCRIPTS="$HOME"/Library/Application\ Scripts/Pansift
mkdir -p "$PANSIFT_SCRIPTS"
export PANSIFT_SCRIPTS="$PANSIFT_SCRIPTS"
echo "Pansift Application Scripts Path: \"$PANSIFT_SCRIPTS\""

# Logs, logs, logs
PANSIFT_LOGS="$HOME"/Library/Logs/Pansift
mkdir -p "$PANSIFT_LOGS"
export PANSIFT_LOGS="$PANSIFT_LOGS"
echo "Pansift Logs Path: \"$PANSIFT_LOGS\""

# PIDs and other flotsam
PANSIFT_SUPPORT="$HOME"/Library/Application\ Support/Pansift
mkdir -p "$PANSIFT_SUPPORT"
export PANSIFT_SUPPORT="$PANSIFT_SUPPORT"
echo "Pansift Application Support Path: \"$PANSIFT_SUPPORT\""

# Next line will need changing once a full Pansift flip
defaults write /Library/Preferences/com.matryer.BitBar pluginsDirectory "$PANSIFT_SCRIPTS"/Plugins
# Need to add a first run that adds the plist to the LaunchAgents !!!
defaults write com.matryer.BitBar pluginsDirectory "$PANSIFT_SCRIPTS"/Plugins
defaults write com.matryer.BitBar NSNavLastRootDirectory "$PANSIFT_SCRIPTS"/Plugins 
defaults write com.matryer.BitBar userConfigDisabled -bool true

pansift_uuid_file="$PANSIFT_PREFERENCES"/pansift_uuid.conf
pansift_ingest_file="$PANSIFT_PREFERENCES"/pansift_ingest.conf
pansift_token_file="$PANSIFT_PREFERENCES"/pansift_token.conf
machine_uuid_file="$PANSIFT_PREFERENCES"/machine_uuid.conf
annotations_file="$PANSIFT_LOGS"/pansift_annotations.log
touch "$annotations_file" # This is just to create for tailing if not already there.

# We need a UUID and token to write to DB. 

if test -f "$pansift_uuid_file"; then
  line=$(head -n 1 "$pansift_uuid_file")
  pansift_uuid=$(echo -n "$line" | awk '{$1=$1;print}' | tr ',' '.' | tr -s ' ' | tr '[:upper:]' '[:lower:]' | tr -d '\r')
else
  pansift_uuid=$(uuidgen | tr '[:upper:]' '[:lower:]')
  echo -n "$pansift_uuid" > $pansift_uuid_file
  token=$($scripts/db-setup.sh "$pansift_uuid") 
  echo -n "$token" > $pansift_token_file
  # Call webhook to create DB with UUID
  # If we're gonna create a new UUID here we need to pass it to the DB (also from reset or update UUID)
  # Call script to set up DB db-setup.sh
fi

# We need the ENV variable for the subshell...
export PANSIFT_UUID=$pansift_uuid

# This assumes connectivity on first run to at lesat get the correct DB host (but default fall back too) 
# Would be good to have a forced kill switch to localhost in the future somehow other than connected restarts
# See ingest router webhook service.
if test -f "$pansift_ingest_file"; then
  line=$(head -n 1 "$pansift_ingest_file")
  regex='(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'
  if [[ $line =~ $regex ]]; then
    pansift_ingest=$(echo -n "$line" | xargs | tr ',' '.' | tr -s ' ' | tr '[:upper:]' '[:lower:]' | tr -d '\r')
  else
    pansift_ingest=$("$PANSIFT_SCRIPTS"/ingest.sh "$PANSIFT_UUID" | tr '[:upper:]' '[:lower:]')
    echo -n "$pansift_ingest" > $pansift_ingest_file
  fi
else
  pansift_ingest=$("$PANSIFT_SCRIPTS"/ingest.sh "$PANSIFT_UUID" | tr '[:upper:]' '[:lower:]')
  echo -n "$pansift_ingest" > $pansift_ingest_file
fi
export PANSIFT_INGEST=$pansift_ingest


if test -f "$machine_uuid_file"; then
  line=$(head -n 1 "$machine_uuid_file")
  machine_uuid=$(echo -n "$line" | awk '{$1=$1;print}' | tr ',' '.' | tr -s ' ' | tr '[:upper:]' '[:lower:]' | tr -d '\r')
else
  if [[ "$OSTYPE" == linux-gnu* ]]; then
    # ... coerce hostid in to uuid?
    true
  elif [[ "$OSTYPE" == darwin* ]]; then
    # Mac OSX
    machine_uuid=$(ioreg -d2 -c IOPlatformExpertDevice | awk -F\" '/IOPlatformUUID/{print $(NF-1)}' | tr '[:upper:]' '[:lower:]')
  elif [[ "$OSTYPE" == "cygwin" ]]; then
    # POSIX compatibility layer and Linux environment emulation for Windows
    true
  elif [[ "$OSTYPE" == "msys" ]]; then
    # Lightweight shell and GNU utilities compiled for Windows (part of MinGW)
    true
  elif [[ "$OSTYPE" == "win32" ]]; then
    # I'm not sure this can happen.
    true
  elif [[ "$OSTYPE" == "freebsd"* ]]; then
    true
    # ...
  else
    machine_uuid=$(uuidgen | tr '[:upper:]' '[:lower:]')
    # Or perhaps another approach?
    # od -x /dev/urandom | head -1 | awk '{OFS="-"; print $2$3,$4,$5,$6,$7$8$9}'
    # Unknown so create it.
  fi
  # MAC Machine UUID is different but will be our unique  primary key we can read or generate on other platforms
  echo -n "$machine_uuid" > "$PANSIFT_PREFERENCES"/machine_uuid.conf
fi



export MACHINE_UUID=$machine_uuid
#echo "Exported machine_uuid=$machine_uuid"
pansift_token_file="$PANSIFT_PREFERENCES"/pansift_token.conf
if test -f "$pansift_token_file"; then
  line=$(head -n 1 "$pansift_token_file")
  # Token is case sensitive!!!
  pansift_clean_token=$(echo -n "$line" | awk '{$1=$1;print}' | tr ',' '.' | tr -s ' ' | tr -d '\r' | sed 's! !\\ !g')
  export PANSIFT_TOKEN=$pansift_clean_token
fi

echo "Pansift UUID: $PANSIFT_UUID"
echo "Machine UUID: $MACHINE_UUID"
echo "Ingest URL: $PANSIFT_INGEST"
echo "Write Token: $PANSIFT_TOKEN"

tpid="$PANSIFT_SUPPORT"/telegraf.pid
if test -f "$tpid"; then
  pkill -F "$PANSIFT_SUPPORT"/telegraf.pid
fi
pkill "$PANSIFT_SUPPORT"/telegraf || true
sleep 10

touch "$PANSIFT_SUPPORT"/telegraf.pid "$PANSIFT_LOGS"/telegraf.log
"$PANSIFT_SUPPORT"/telegraf --config "$PANSIFT_PREFERENCES"/telegraf-osx.conf --pidfile "$PANSIFT_SUPPORT"/telegraf.pid >/dev/null 2>&1 &
disown
exit 0
